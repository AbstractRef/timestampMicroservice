 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })



app.get('/:date', function(req, res) {
    
    // Retrieving date requested for conversion
    var givenDate = req.params.date;
    
    // Converting date from a String to a Date format
    var parsedDate = parseDate(givenDate);
    
    if (parsedDate) {
      
      var unixTime = toUnixTime(parsedDate);
      var naturalTime = toNaturalTime(parsedDate);
       
      res.send( {'unix' : unixTime, 'natural': naturalTime} );
      
    } else {
      
      res.send( {'unix' : null, 'natural': null} );
    
    }
    
    res.end();
    
});


app.listen(8080, function () {
  console.log('Timestamp service listening on port 8080!');
});



function parseDate(dateStr) {
  
  if (!isNaN(dateStr)) {
    // Handle as unix epoch time
    
    // Converting our unix timestamp from seconds to millis (millis expected)
    return new Date(parseInt(dateStr) * 1000);
    
  } else {
    // Handle natural date string
    
    // Use Javascript's Date.parse to parse date strings in a number of forms
    var millis = Date.parse(dateStr);
    
    if (isNaN(millis)) {
      // If Date.parse fails, it returns NaN
      return false;
      
    } else {
      // Otherwise, a date was successfully identified and parsed
      return new Date(millis);
      
    }
  }
  
}

const months = ["January", "February", "March", "April", "May", "June", "July", 
"August", "September", "October", "November", "December"];

// Converts a Date value to the equivalent UNIX epoch time (number).
function toUnixTime(date) {
  
  // Date.getTime() returns epoch time in millis, so we divided to get seconds.
  return (date.getTime() / 1000);
  
}

// Converts a Date value to the equivalent natural language 
function toNaturalTime(date) {
  
  return "" + date.getDate() + " " + months[date.getMonth()] + ", " 
  + date.getFullYear();
  
}
// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

